[{"/client/src/App.js":"1","/client/src/containers/Auth/Auth.js":"2","/client/src/containers/Auth/Logout/Logout.js":"3","/client/src/containers/Home/Home.js":"4","/client/src/store/actions/index.js":"5","/client/src/hoc/Auxiliary/Auxiliary.js":"6","/client/src/components/Cat/Cat.js":"7","/client/src/components/UI/Spinner/Spinner.js":"8","/client/src/components/UI/Button/Button.js":"9","/client/src/components/Navigation/Toolbar/Toolbar.js":"10","/client/src/store/actions/home.js":"11","/client/src/store/actions/auth.js":"12","/client/src/components/Navigation/NavigationItems/NavigationItems.js":"13","/client/src/components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js":"14","/client/src/components/Navigation/NavigationItems/NavigationItem/NavigationItem.js":"15","/client/src/store/utility.js":"16","/client/src/reportWebVitals.js":"17","/client/src/store/actions/actionTypes.js":"18","/client/src/components/Weight/Weight.js":"19","/client/src/store/actions/myCat.js":"20","/client/src/components/UI/Backdrop/Backdrop.js":"21","/client/src/store/reducers/home.js":"22","/client/src/hoc/Layout/Layout.js":"23","/client/src/components/Logo/Logo.js":"24"},{"size":1685,"mtime":1613456218164,"results":"25","hashOfConfig":"26"},{"size":5511,"mtime":1613546080542,"results":"27","hashOfConfig":"26"},{"size":533,"mtime":1613545185853,"results":"28","hashOfConfig":"26"},{"size":9138,"mtime":1613456218188,"results":"29","hashOfConfig":"26"},{"size":278,"mtime":1613545120952,"results":"30","hashOfConfig":"26"},{"size":73,"mtime":1613456218191,"results":"31","hashOfConfig":"26"},{"size":743,"mtime":1613456218166,"results":"32","hashOfConfig":"26"},{"size":1084,"mtime":1613456218182,"results":"33","hashOfConfig":"26"},{"size":334,"mtime":1613456218179,"results":"34","hashOfConfig":"26"},{"size":648,"mtime":1613456218176,"results":"35","hashOfConfig":"26"},{"size":2104,"mtime":1613456218196,"results":"36","hashOfConfig":"26"},{"size":2759,"mtime":1613633502212,"results":"37","hashOfConfig":"26"},{"size":1019,"mtime":1613456218170,"results":"38","hashOfConfig":"26"},{"size":292,"mtime":1613456218173,"results":"39","hashOfConfig":"26"},{"size":445,"mtime":1613456218169,"results":"40","hashOfConfig":"26"},{"size":142,"mtime":1613456218199,"results":"41","hashOfConfig":"26"},{"size":362,"mtime":1609917824492,"results":"42","hashOfConfig":"26"},{"size":1515,"mtime":1613546080544,"results":"43","hashOfConfig":"26"},{"size":316,"mtime":1613456218184,"results":"44","hashOfConfig":"26"},{"size":5635,"mtime":1613546080546,"results":"45","hashOfConfig":"26"},{"size":227,"mtime":1613456218178,"results":"46","hashOfConfig":"26"},{"size":1816,"mtime":1613456218198,"results":"47","hashOfConfig":"26"},{"size":1490,"mtime":1613456218191,"results":"48","hashOfConfig":"26"},{"size":409,"mtime":1613456218167,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"o1qt2c",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/client/src/App.js",[],["103","104"],"/client/src/containers/Auth/Auth.js",[],["105","106"],"/client/src/containers/Auth/Logout/Logout.js",[],["107","108"],"/client/src/containers/Home/Home.js",["109","110"],"import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport classes from './Home.module.css';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Weight from '../../components/Weight/Weight';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        controls: {\r\n            weight: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Weight'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        displayWeights: false,\r\n        hasSelectedCat: false,\r\n\r\n        catName: null,\r\n        catBirthdate: null,\r\n        catBreed: null,\r\n        catId: null,\r\n        weights: null,\r\n        catImage: null\r\n    }\r\n\r\n    // updates the input element when we enter something\r\n    inputChangedHandler = (event, controlName) => {\r\n\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        }\r\n        \r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    // Form validation rules \r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n\r\n        if(rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        //prevents the reloading of the page\r\n        event.preventDefault();\r\n\r\n        const catId = this.state.catId;\r\n        this.props.onSubmitWeight(this.state.controls.weight.value, catId);\r\n        this.setState({displayWeights: true});\r\n    }\r\n\r\n    registerCatHandler = () => {\r\n        this.props.history.push('/my-cat');\r\n    }  \r\n\r\n    logInHandler = () => {\r\n        this.props.history.push('/auth');\r\n    }\r\n\r\n    displayWeightFormHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            weight: {\r\n                ...this.state.controls.weight,\r\n                value: ''\r\n            }\r\n        };\r\n\r\n        this.setState({displayWeights: false, controls: updatedControls});\r\n    }\r\n\r\n    displayWeightsHandler = () => {\r\n        this.setState({displayWeights: true});\r\n    }\r\n\r\n    clearWeightsHandler = () => {\r\n        let catId = this.state.catId;\r\n        let confirm = window.confirm('Are you sure you want to clear your Cat\\'s weight history ?');\r\n        if (confirm) {\r\n            this.props.onClearWeights(catId);\r\n        } \r\n    }\r\n\r\n    selectCatHandler = (cat) => {\r\n        this.setState({\r\n            displayWeights: true,\r\n            hasSelectedCat: true,\r\n\r\n            catName: cat.name,\r\n            catBirthdate: cat.birthdate,\r\n            catBreed: cat.breed,\r\n            catImage: cat.image,\r\n            catId: cat.id\r\n        });\r\n\r\n        this.props.onGetWeights(cat.id);\r\n    }\r\n\r\n    returnHandler = () => {\r\n        this.setState({ \r\n            displayWeights: false, \r\n            addNewCat: false, \r\n            changeImage: false,\r\n            hasSelectedCat: false,\r\n\r\n            catName: null,\r\n            catBirthdate: null,\r\n            catBreed: null,\r\n            catId: null,\r\n            weights: null,\r\n            catImage: null\r\n        });\r\n    }\r\n\r\n    render () {\r\n    // Convert the state object into a array we can loop through\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: this.state.controls[key]\r\n        });\r\n    }\r\n\r\n    // Email and password inputs\r\n    let form = formElementsArray.map(formElement => (\r\n        <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType} \r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n        />\r\n        ));\r\n\r\n        let weights = <Spinner />;\r\n        if (!this.props.loading && this.props.weights) {\r\n            weights = this.props.weights.map(weight => (\r\n                <div>\r\n                    <Weight \r\n                        key={weight.id}\r\n                        date={new Date(weight.created_at).toLocaleDateString('ja-JP')}\r\n                        value={weight.value + ' kg'}\r\n                    />\r\n                </div>\r\n            ))\r\n        }\r\n\r\n        let image = <Spinner />;\r\n        if (!this.props.loading && this.state.catImage) {\r\n            image = (\r\n                <img className={classes.Image} src={this.state.catImage.url} />\r\n            );\r\n        }\r\n\r\n        let catsImage = <Spinner />;\r\n        if (!this.props.loading) {\r\n            catsImage = this.props.cats.map(cat => (\r\n                <img className={classes.Image} src={cat.image.url} onClick={() => this.selectCatHandler(cat)}/>\r\n            ))\r\n        }\r\n    \r\n        return (\r\n            this.props.isAuthenticated ?\r\n                this.props.hasCat ?\r\n                    this.state.hasSelectedCat ?\r\n                        this.state.displayWeights ?\r\n                            <div className={classes.Home}>\r\n                                <h1>{this.state.catName}</h1>\r\n                                {image}\r\n                                <br />\r\n                                <Button btnType=\"Success\" clicked={this.displayWeightFormHandler}>Enter a new weight !</Button>\r\n                                <br />\r\n                                {this.props.weights !== null && this.props.weights.length >= 1 ? <Button btnType=\"Danger\" clicked={this.clearWeightsHandler}>Clear weight history</Button> : null}\r\n                                {this.props.weights !== null && this.props.weights.length >= 1 ? <h1>{this.state.catName}'s weight history</h1> : null}\r\n                                {weights}\r\n                                <Button btnType=\"Change\" clicked={this.returnHandler}>Back to Home</Button>\r\n                            </div>\r\n                        :\r\n                            <div className={classes.Home}>\r\n                                <h1>How much does {this.state.catName} weigh today ?</h1>\r\n                                <form onSubmit={this.submitHandler}>\r\n                                    {form}\r\n                                    <Button btnType=\"Success\">Submit !</Button>\r\n                                    {!this.state.displayWeights ? <Button btnType=\"Change\" clicked={this.displayWeightsHandler}>Back</Button> : null}\r\n                                </form>\r\n                            </div>\r\n                    :\r\n                    <div className={classes.Home}>\r\n                        <h1>Select a Cat !</h1>\r\n                        {catsImage}\r\n                    </div>\r\n                :\r\n                    <div className={classes.Home}>\r\n                        You didn’t register your cat yet. Please tell us about your kitty <span className={classes.FollowLink} onClick={this.registerCatHandler}>here</span> !\r\n                    </div>\r\n            :\r\n                <div className={classes.Home}>\r\n                    Welcome to your favorite cat weight monitoring app, Happy Cat ! <br/> To start using the application, please <span className={classes.FollowLink} onClick={this.logInHandler}>log in</span> or <span className={classes.FollowLink} onClick={this.logInHandler}>create an account</span> !\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.auth.token !== null,\r\n        hasCat: state.myCat.hasCat,\r\n        weights: state.myCat.weights,\r\n        loading: state.home.loading,\r\n        hasSubmitWeight: state.home.hasSubmitWeight,\r\n        cats: state.myCat.cats\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSubmitWeight: (weight, catId) => dispatch(actions.submitWeight(weight, catId)),\r\n        onClearWeights: (catId) => dispatch(actions.deleteWeights(catId)),\r\n        onGetWeights: (catId) => dispatch(actions.getWeights(catId))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","/client/src/store/actions/index.js",[],"/client/src/hoc/Auxiliary/Auxiliary.js",[],"/client/src/components/Cat/Cat.js",["111"],"import React from 'react';\r\nimport classes from './Cat.module.css';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\nimport Button from '../UI/Button/Button';\r\n\r\nconst cat = (props) => {\r\n    let image = <Spinner />;\r\n    if (props.image) {\r\n        image = (\r\n            <img className={classes.Image} src={props.image} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.MyCat}>\r\n            {image}\r\n            <h1>{props.name}</h1>\r\n            <p>\r\n                {props.birthdate} | {props.breed}\r\n            </p>\r\n            <Button btnType=\"Success\" clicked={props.edit}>Edit</Button>\r\n            <Button btnType=\"Danger\" clicked={props.delete}>Delete</Button>\r\n        </div> \r\n    );\r\n} \r\n\r\nexport default cat;","/client/src/components/UI/Spinner/Spinner.js",[],"/client/src/components/UI/Button/Button.js",[],"/client/src/components/Navigation/Toolbar/Toolbar.js",[],"/client/src/store/actions/home.js",[],"/client/src/store/actions/auth.js",[],"/client/src/components/Navigation/NavigationItems/NavigationItems.js",[],"/client/src/components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js",[],"/client/src/components/Navigation/NavigationItems/NavigationItem/NavigationItem.js",[],"/client/src/store/utility.js",[],"/client/src/reportWebVitals.js",[],"/client/src/store/actions/actionTypes.js",[],"/client/src/components/Weight/Weight.js",[],"/client/src/store/actions/myCat.js",[],"/client/src/components/UI/Backdrop/Backdrop.js",[],"/client/src/store/reducers/home.js",[],"/client/src/hoc/Layout/Layout.js",[],"/client/src/components/Logo/Logo.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"112","replacedBy":"118"},{"ruleId":"114","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":187,"column":17,"nodeType":"122","endLine":187,"endColumn":80},{"ruleId":"120","severity":1,"message":"121","line":194,"column":17,"nodeType":"122","endLine":194,"endColumn":112},{"ruleId":"120","severity":1,"message":"121","line":10,"column":13,"nodeType":"122","endLine":10,"endColumn":64},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],["123"],["124"],["123"],["124"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]