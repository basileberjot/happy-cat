[{"D:\\www\\happy-cat\\client\\src\\store\\reducers\\auth.js":"1","D:\\www\\happy-cat\\client\\src\\store\\actions\\auth.js":"2","D:\\www\\happy-cat\\client\\src\\containers\\Auth\\Auth.js":"3","D:\\www\\happy-cat\\client\\src\\components\\UI\\Input\\Input.js":"4","D:\\www\\happy-cat\\client\\src\\store\\actions\\actionTypes.js":"5","D:\\www\\happy-cat\\client\\src\\hoc\\Layout\\Layout.js":"6","D:\\www\\happy-cat\\client\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js":"7","D:\\www\\happy-cat\\client\\src\\components\\Navigation\\Toolbar\\Toolbar.js":"8","D:\\www\\happy-cat\\client\\src\\components\\Navigation\\SideDrawer\\SideDrawer.js":"9","D:\\www\\happy-cat\\client\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js":"10","D:\\www\\happy-cat\\client\\src\\components\\Navigation\\SideDrawer\\DrawerToggle\\DrawerToggle.js":"11","D:\\www\\happy-cat\\client\\src\\store\\actions\\index.js":"12","D:\\www\\happy-cat\\client\\src\\App.js":"13","D:\\www\\happy-cat\\client\\src\\containers\\Auth\\Logout\\Logout.js":"14","D:\\www\\happy-cat\\client\\src\\store\\utility.js":"15","D:\\www\\happy-cat\\client\\src\\hoc\\Auxiliary\\Auxiliary.js":"16","D:\\www\\happy-cat\\client\\src\\components\\UI\\Spinner\\Spinner.js":"17","D:\\www\\happy-cat\\client\\src\\components\\Logo\\Logo.js":"18","D:\\www\\happy-cat\\client\\src\\components\\UI\\Backdrop\\Backdrop.js":"19","D:\\www\\happy-cat\\client\\src\\containers\\MyCat\\MyCat.js":"20","D:\\www\\happy-cat\\client\\src\\reportWebVitals.js":"21","D:\\www\\happy-cat\\client\\src\\store\\actions\\myCat.js":"22","D:\\www\\happy-cat\\client\\src\\index.js":"23","D:\\www\\happy-cat\\client\\src\\store\\reducers\\myCat.js":"24","D:\\www\\happy-cat\\client\\src\\components\\UI\\Button\\Button.js":"25","D:\\www\\happy-cat\\client\\src\\containers\\Home\\Home.js":"26","D:\\www\\happy-cat\\client\\src\\store\\actions\\home.js":"27","D:\\www\\happy-cat\\client\\src\\store\\reducers\\home.js":"28","D:\\www\\happy-cat\\client\\src\\components\\Weight\\Weight.js":"29","D:\\www\\happy-cat\\client\\src\\components\\Cat\\Cat.js":"30"},{"size":1359,"mtime":1612338212184,"results":"31","hashOfConfig":"32"},{"size":2603,"mtime":1610611698259,"results":"33","hashOfConfig":"32"},{"size":5441,"mtime":1612337847263,"results":"34","hashOfConfig":"32"},{"size":1762,"mtime":1610009500335,"results":"35","hashOfConfig":"32"},{"size":1470,"mtime":1612514449725,"results":"36","hashOfConfig":"32"},{"size":1449,"mtime":1613101542576,"results":"37","hashOfConfig":"32"},{"size":445,"mtime":1610538312658,"results":"38","hashOfConfig":"32"},{"size":648,"mtime":1613101440733,"results":"39","hashOfConfig":"32"},{"size":925,"mtime":1610609531298,"results":"40","hashOfConfig":"32"},{"size":1019,"mtime":1613101490885,"results":"41","hashOfConfig":"32"},{"size":292,"mtime":1610538312674,"results":"42","hashOfConfig":"32"},{"size":278,"mtime":1612514529064,"results":"43","hashOfConfig":"32"},{"size":1593,"mtime":1611818307720,"results":"44","hashOfConfig":"32"},{"size":533,"mtime":1610539876082,"results":"45","hashOfConfig":"32"},{"size":142,"mtime":1610523693940,"results":"46","hashOfConfig":"32"},{"size":73,"mtime":1610010028292,"results":"47","hashOfConfig":"32"},{"size":1084,"mtime":1610615675463,"results":"48","hashOfConfig":"32"},{"size":304,"mtime":1610609354766,"results":"49","hashOfConfig":"32"},{"size":227,"mtime":1610609490366,"results":"50","hashOfConfig":"32"},{"size":7838,"mtime":1613102003574,"results":"51","hashOfConfig":"32"},{"size":362,"mtime":1609917824492,"results":"52","hashOfConfig":"32"},{"size":5935,"mtime":1613101967294,"results":"53","hashOfConfig":"32"},{"size":1269,"mtime":1611220393972,"results":"54","hashOfConfig":"32"},{"size":4691,"mtime":1613102086367,"results":"55","hashOfConfig":"32"},{"size":334,"mtime":1610009500318,"results":"56","hashOfConfig":"32"},{"size":7177,"mtime":1612515807716,"results":"57","hashOfConfig":"32"},{"size":2104,"mtime":1612854028027,"results":"58","hashOfConfig":"32"},{"size":1816,"mtime":1612853980755,"results":"59","hashOfConfig":"32"},{"size":316,"mtime":1611737172703,"results":"60","hashOfConfig":"32"},{"size":743,"mtime":1613099305467,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rt0gh3",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"95"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\www\\happy-cat\\client\\src\\store\\reducers\\auth.js",[],"D:\\www\\happy-cat\\client\\src\\store\\actions\\auth.js",[],["131","132"],"D:\\www\\happy-cat\\client\\src\\containers\\Auth\\Auth.js",[],["133","134"],"D:\\www\\happy-cat\\client\\src\\components\\UI\\Input\\Input.js",[],["135","136"],"D:\\www\\happy-cat\\client\\src\\store\\actions\\actionTypes.js",[],"D:\\www\\happy-cat\\client\\src\\hoc\\Layout\\Layout.js",[],"D:\\www\\happy-cat\\client\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js",[],"D:\\www\\happy-cat\\client\\src\\components\\Navigation\\Toolbar\\Toolbar.js",[],"D:\\www\\happy-cat\\client\\src\\components\\Navigation\\SideDrawer\\SideDrawer.js",[],["137","138"],"D:\\www\\happy-cat\\client\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js",[],"D:\\www\\happy-cat\\client\\src\\components\\Navigation\\SideDrawer\\DrawerToggle\\DrawerToggle.js",[],["139","140"],"D:\\www\\happy-cat\\client\\src\\store\\actions\\index.js",[],"D:\\www\\happy-cat\\client\\src\\App.js",[],"D:\\www\\happy-cat\\client\\src\\containers\\Auth\\Logout\\Logout.js",[],["141","142"],"D:\\www\\happy-cat\\client\\src\\store\\utility.js",[],"D:\\www\\happy-cat\\client\\src\\hoc\\Auxiliary\\Auxiliary.js",[],"D:\\www\\happy-cat\\client\\src\\components\\UI\\Spinner\\Spinner.js",[],["143","144"],"D:\\www\\happy-cat\\client\\src\\components\\Logo\\Logo.js",[],"D:\\www\\happy-cat\\client\\src\\components\\UI\\Backdrop\\Backdrop.js",[],"D:\\www\\happy-cat\\client\\src\\containers\\MyCat\\MyCat.js",["145"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './MyCat.module.css';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\r\nimport Cat from '../../components/Cat/Cat';\r\n\r\nconst userId = localStorage.getItem('userId');\r\n\r\nclass MyCat extends Component {\r\n    state = {\r\n        controls: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Name'\r\n                },\r\n                value: this.props.catName !== '' ? this.props.catName : '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            birthdate: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'date',\r\n                    placeholder: 'Birthdate :',\r\n                },\r\n                value: this.props.catBirthdate !== '' ? this.props.catBirthdate : '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            breed: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Breed'\r\n                },\r\n                value: this.props.catBreed !== '' ? this.props.catBreed : '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        goToEdit: false,\r\n        addNewCat: false,\r\n        featured_image: null,\r\n        id: null\r\n    }\r\n\r\n    // Form validation rules \r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n\r\n        if(rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    // updates the input element when we enter something\r\n    inputChangedHandler = (event, controlName) => {\r\n\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        }\r\n        \r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        //prevents the reloading of the page\r\n        event.preventDefault();\r\n\r\n        if(!this.state.goToEdit || this.state.addNewCat) {\r\n            this.props.onSubmitRegister(this.state.controls.name.value, this.state.controls.birthdate.value, this.state.controls.breed.value, userId, this.state.featured_image);\r\n            this.setState({ goToEdit: false });\r\n        } else {\r\n            const catId = this.state.id;\r\n            this.props.onSubmitEdit(this.state.controls.name.value, this.state.controls.birthdate.value, this.state.controls.breed.value, userId, catId, this.state.featured_image);\r\n            this.setState({ goToEdit: false });\r\n        }\r\n    }\r\n\r\n    editContinueHandler = (catId) => {\r\n        this.setState({\r\n            id: catId,\r\n            goToEdit: true\r\n        });\r\n        console.log(this.state.id);\r\n    }\r\n\r\n    addNewCatHandler = () => {\r\n        this.setState({\r\n            goToEdit: true,\r\n            addNewCat: true\r\n        });\r\n    }\r\n\r\n    returnHandler = () => {\r\n        this.setState({ goToEdit: false, addNewCat: false });\r\n    }\r\n\r\n    deleteHandler = (catId) => {\r\n        let confirm = window.confirm('Are you sure you want to delete your Cat ?');\r\n        if (confirm) {\r\n            this.props.onDelete(catId, userId);\r\n        } \r\n    }\r\n\r\n    onImageChange = event => { \r\n        this.setState({ featured_image: event.target.files[0] });\r\n    };\r\n\r\n    render () {\r\n        // Convert the state object into a array we can loop through\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        // Email and password inputs\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n            ));\r\n \r\n        let cats = <Spinner />;\r\n        if (!this.props.loading) {\r\n            cats = this.props.cats.map(cat => (\r\n                <Cat \r\n                    key={cat.id}\r\n                    name={cat.name}\r\n                    birthdate={cat.birthdate}\r\n                    breed={cat.breed}\r\n                    image={cat.image.url}\r\n                    edit={() => this.editContinueHandler(cat.id)}\r\n                    delete={() => this.deleteHandler(cat.id)}\r\n                />\r\n            ))\r\n        }\r\n\r\n        return (\r\n            !this.props.hasCat || this.props.editCat || this.state.goToEdit ? \r\n            <div className={classes.MyCat}>\r\n                <h1>{!this.state.goToEdit || this.state.addNewCat ? 'Who\\'s your little buddy ? (^・ω・^ )' : 'Edit your Cat'}</h1>\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <label htmlFor=\"image\">Upload image\r\n                        <input type=\"file\" name=\"image\" accept=\"image/*\" onChange={this.onImageChange}/>\r\n                    </label>\r\n                    <Button btnType=\"Success\">Submit !</Button>\r\n                    {this.state.goToEdit ? <Button btnType=\"Change\" clicked={this.returnHandler}>Back</Button> : null}\r\n                </form>\r\n            </div>\r\n            : \r\n            <div>\r\n                {cats}\r\n                <Button btnType=\"Success\" clicked={this.addNewCatHandler}>Add a new Cat</Button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        cats: state.myCat.cats,\r\n        catName: state.myCat.name,\r\n        catBirthdate: state.myCat.birthdate,\r\n        catBreed: state.myCat.breed,\r\n        catId: state.myCat.catId,\r\n        hasCat: state.myCat.hasCat,\r\n        image: state.myCat.image,\r\n        editCat: state.myCat.editCat\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getCats: (userId) => dispatch(actions.getCats(userId)),\r\n        onSubmitRegister: (name, birthdate, breed, userId, image) => dispatch(actions.register(name, birthdate, breed, userId, image)),\r\n        onSubmitEdit: (name, birthdate, breed, userId, catId, image) => dispatch(actions.edit(name, birthdate, breed, userId, catId, image)),\r\n        onDelete: (catId, userId) => dispatch(actions.deleteCat(catId, userId))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyCat);","D:\\www\\happy-cat\\client\\src\\reportWebVitals.js",[],"D:\\www\\happy-cat\\client\\src\\store\\actions\\myCat.js",[],"D:\\www\\happy-cat\\client\\src\\index.js",[],"D:\\www\\happy-cat\\client\\src\\store\\reducers\\myCat.js",[],"D:\\www\\happy-cat\\client\\src\\components\\UI\\Button\\Button.js",[],"D:\\www\\happy-cat\\client\\src\\containers\\Home\\Home.js",["146"],"import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport classes from './Home.module.css';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Weight from '../../components/Weight/Weight';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        controls: {\r\n            weight: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Weight'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        displayWeights: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log(this.props.image);\r\n    }\r\n\r\n    // updates the input element when we enter something\r\n    inputChangedHandler = (event, controlName) => {\r\n\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        }\r\n        \r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    // Form validation rules \r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n\r\n        if(rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        //prevents the reloading of the page\r\n        event.preventDefault();\r\n\r\n        const catId = this.props.catId;\r\n        this.props.onSubmitWeight(this.state.controls.weight.value, catId);\r\n        this.setState({displayWeights: true});\r\n    }\r\n\r\n    registerCatHandler = () => {\r\n        this.props.history.push('/my-cat');\r\n    }  \r\n\r\n    logInHandler = () => {\r\n        this.props.history.push('/auth');\r\n    }\r\n\r\n    displayWeightFormHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({displayWeights: false});\r\n    }\r\n\r\n    displayWeightsHandler = () => {\r\n        this.setState({displayWeights: true});\r\n    }\r\n\r\n    clearWeightsHandler = () => {\r\n        let catId = this.props.catId;\r\n        let confirm = window.confirm('Are you sure you want to clear your Cat\\'s weight history ?');\r\n        if (confirm) {\r\n            this.props.onClearWeights(catId);\r\n        } \r\n    }\r\n\r\n    render () {\r\n    // Convert the state object into a array we can loop through\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: this.state.controls[key]\r\n        });\r\n    }\r\n\r\n    // Email and password inputs\r\n    let form = formElementsArray.map(formElement => (\r\n        <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType} \r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n        />\r\n        ));\r\n\r\n        let weights = <Spinner />;\r\n        if (!this.props.loading && this.props.weights) {\r\n            weights = this.props.weights.map(weight => (\r\n                <div>\r\n                    <Weight \r\n                        key={weight.id}\r\n                        date={new Date(weight.created_at).toLocaleDateString('ja-JP')}\r\n                        value={weight.value + ' kg'}\r\n                    />\r\n                </div>\r\n            ))\r\n        }\r\n\r\n        let image = <Spinner />;\r\n        if (!this.props.loading && this.props.image) {\r\n            image = (\r\n                <img className={classes.Image} src={this.props.image.url} />\r\n            );\r\n        }\r\n    \r\n        return (\r\n            this.props.isAuthenticated ?\r\n                this.props.hasCat ?\r\n                    this.state.displayWeights ? \r\n                        <div className={classes.Home}>\r\n                            {image}\r\n                            <br />\r\n                            <Button btnType=\"Success\" clicked={this.displayWeightFormHandler}>Enter a new weight !</Button>\r\n                            <br />\r\n                            <Button btnType=\"Change\" clicked={this.clearWeightsHandler}>Clear weight history</Button>\r\n                            {this.props.weights ? <h1>{this.props.catName}'s weight history</h1> : null}\r\n                            {weights}\r\n                        </div>\r\n                    :\r\n                        <div className={classes.Home}>\r\n                            <h1>How much does {this.props.catName} weigh today ?</h1>\r\n                            <form onSubmit={this.submitHandler}>\r\n                                {form}\r\n                                <Button btnType=\"Success\">Submit !</Button>\r\n                                {!this.state.displayWeights ? <Button btnType=\"Change\" clicked={this.displayWeightsHandler}>Back</Button> : null}\r\n                            </form>\r\n                        </div>\r\n                :\r\n                    <div className={classes.Home}>\r\n                        You didn’t register your cat yet. Please tell us about your kitty <span className={classes.FollowLink} onClick={this.registerCatHandler}>here</span> !\r\n                    </div>\r\n            :\r\n                <div className={classes.Home}>\r\n                    Welcome to your favorite cat health monitoring app, Happy Cat ! <br/> To start using the application, please <span className={classes.FollowLink} onClick={this.logInHandler}>log in</span> or <span className={classes.FollowLink} onClick={this.logInHandler}>create an account</span> !\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: state.auth.token !== null,\r\n        catName: state.myCat.name,\r\n        catId: state.myCat.catId,\r\n        hasCat: state.myCat.hasCat,\r\n        loading: state.home.loading,\r\n        weights: state.myCat.weights,\r\n        image: state.myCat.image,\r\n        hasSubmitWeight: state.home.hasSubmitWeight,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSubmitWeight: (weight, catId) => dispatch(actions.submitWeight(weight, catId)),\r\n        onClearWeights: (catId) => dispatch(actions.deleteWeights(catId))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","D:\\www\\happy-cat\\client\\src\\store\\actions\\home.js",[],"D:\\www\\happy-cat\\client\\src\\store\\reducers\\home.js",[],"D:\\www\\happy-cat\\client\\src\\components\\Weight\\Weight.js",[],"D:\\www\\happy-cat\\client\\src\\components\\Cat\\Cat.js",["147"],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"148","replacedBy":"152"},{"ruleId":"150","replacedBy":"153"},{"ruleId":"148","replacedBy":"154"},{"ruleId":"150","replacedBy":"155"},{"ruleId":"148","replacedBy":"156"},{"ruleId":"150","replacedBy":"157"},{"ruleId":"148","replacedBy":"158"},{"ruleId":"150","replacedBy":"159"},{"ruleId":"148","replacedBy":"160"},{"ruleId":"150","replacedBy":"161"},{"ruleId":"148","replacedBy":"162"},{"ruleId":"150","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":8,"column":8,"nodeType":"166","messageId":"167","endLine":8,"endColumn":11},{"ruleId":"168","severity":1,"message":"169","line":144,"column":17,"nodeType":"170","endLine":144,"endColumn":77},{"ruleId":"168","severity":1,"message":"169","line":10,"column":13,"nodeType":"170","endLine":10,"endColumn":64},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],["171"],["172"],["171"],["172"],["171"],["172"],["171"],["172"],["171"],["172"],["171"],["172"],"no-unused-vars","'Aux' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]